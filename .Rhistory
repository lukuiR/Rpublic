explainer_rf <- explain(rf_model,
data = df[1:200,], y = df$performance)
explainer_rf <- explain(rf_model,
data = df[1:200,], y = df$performance)
explainer_rf <- explain(rf_model,
data = df, y = df$performance)
explainer_rf <- explain(rf_model,
data = df, y = df$performance)
?explain
library("DALEX")
library("DALEX")
?explain
explainer_rf <- explain(rf_model,
data = df, y = df$performance)
explainer_rf
mp_rf <- model_performance(explainer_rf)
mp_rf <- model_performance(explainer_rf)
mp_rf
mp_rf <- model_performance(explainer_rf)
test_h2o[10:20,-1]
explanation
plot_features(explanation) +
labs(title = "HR Predictive Analytics: LIME Feature Importance Visualization",
subtitle = "Hold Out (Test) Set, First 10 Cases Shown")
# Run explain() on explainer
explanation <- lime::explain(
as.data.frame(test_h2o[10:11,-1]),
explainer    = explainer,
n_labels     = 1,
n_features   = 4,
kernel_width = 0.5)
plot_features(explanation) +
labs(title = "HR Predictive Analytics: LIME Feature Importance Visualization",
subtitle = "Hold Out (Test) Set, First 10 Cases Shown")
# Run explain() on explainer
explanation <- lime::explain(
as.data.frame(test_h2o[10:11,]),
explainer    = explainer,
n_labels     = 1,
n_features   = 4,
kernel_width = 0.5)
# Run explain() on explainer
explanation <- lime::explain(
as.data.frame(test_h2o[10:11,]),
explainer    = explainer,
n_labels     = 1,
n_features   = 4,
kernel_width = 0.5)
explanation
# Run explain() on explainer
explanation <- lime::explain(
as.data.frame(test_h2o[10:11,-1]),
explainer    = explainer,
n_labels     = 1,
n_features   = 4,
kernel_width = 0.5)
explanation
plot_features(explanation)
?explain
# Run explain() on explainer
explanation <- lime::explain(
as.data.frame(test_h2o[10:11,-1]),
explainer    = explainer,
n_labels     = 1,
n_features   = 6,
kernel_width = 0.5)
plot_features(explanation) +
labs(title = "HR Predictive Analytics: LIME Feature Importance Visualization",
subtitle = "Hold Out (Test) Set, First 10 Cases Shown")
# Run explain() on explainer
explanation <- lime::explain(
as.data.frame(test_h2o[10:20,-1]),
explainer    = explainer,
n_labels     = 1,
n_features   = 6,
kernel_width = 0.5)
plot_features(explanation) +
labs(title = "HR Predictive Analytics: LIME Feature Importance Visualization",
subtitle = "Hold Out (Test) Set, First 10 Cases Shown")
# Run explain() on explainer
explanation <- lime::explain(
as.data.frame(test_h2o[10:20,-1]),
explainer    = explainer,
n_labels     = 1,
n_features   = 8,
kernel_width = 0.5)
plot_features(explanation) +
labs(title = "HR Predictive Analytics: LIME Feature Importance Visualization",
subtitle = "Hold Out (Test) Set, First 10 Cases Shown")
# Run explain() on explainer
explanation <- lime::explain(
as.data.frame(test_h2o[10:11,-1]),
explainer    = explainer,
n_labels     = 1,
n_features   = 5,
kernel_width = 0.5)
test_h2o[10:11,1])
test_h2o[10:11,1]
plot_features(explanation) +
labs(title = "HR Predictive Analytics: LIME Feature Importance Visualization",
subtitle = "Hold Out (Test) Set, First 10 Cases Shown")
# Run explain() on explainer
explanation <- lime::explain(
as.data.frame(test_h2o[10:15,-1]),
explainer    = explainer,
n_labels     = 1,
n_features   = 5,
kernel_width = 0.5)
test_h2o[10:15,1]
plot_features(explanation) +
labs(title = "HR Predictive Analytics: LIME Feature Importance Visualization",
subtitle = "Hold Out (Test) Set, First 10 Cases Shown")
# Run explain() on explainer
explanation <- lime::explain(
as.data.frame(test_h2o[10:15,-1]),
explainer    = explainer,
n_labels     = 2,
n_features   = 5,
kernel_width = 0.5)
plot_features(explanation) +
labs(title = "HR Predictive Analytics: LIME Feature Importance Visualization",
subtitle = "Hold Out (Test) Set, First 10 Cases Shown")
# Run explain() on explainer
explanation <- lime::explain(
as.data.frame(test_h2o[10:15,-1]),
explainer    = explainer,
n_labels     = 3,
n_features   = 5,
kernel_width = 0.5)
# Run explain() on explainer
explanation <- lime::explain(
as.data.frame(test_h2o[1:9,-1]),
explainer    = explainer,
n_labels     = 1,
n_features   = 5,
kernel_width = 0.5)
plot_features(explanation) +
labs(title = "HR Predictive Analytics: LIME Feature Importance Visualization",
subtitle = "Hold Out (Test) Set, First 10 Cases Shown")
test_h2o[1:9,1]
list(test_h2o[1:9,1])
# Run explain() on explainer
explanation <- lime::explain(
as.data.frame(test_h2o[1:6,-1]),
explainer    = explainer,
n_labels     = 1,
n_features   = 5,
kernel_width = 0.5)
plot_features(explanation) +
labs(title = "HR Predictive Analytics: LIME Feature Importance Visualization",
subtitle = "Hold Out (Test) Set, First 10 Cases Shown")
automl_models_h2o <-h2o.randomForest(
x = x,
y = y,
training_frame    = train_h2o,
validation_frame = valid_h2o,
#nfolds=10,
ntrees=60,
binomial_double_trees=TRUE
)
# Predict on hold-out set, test_h2o
pred_h2o <- h2o.predict(object = automl_models_h2o, newdata = test_h2o)
test_performance <- test_h2o %>%
tibble::as_tibble() %>%
select(performance) %>%
add_column(pred = as.vector(pred_h2o$predict)) %>%
mutate_if(is.character, as.factor)
test_performance
confusion_matrix <- test_performance %>%
table()
confusion_matrix
automl_models_h2o <-h2o.randomForest(
x = x,
y = y,
training_frame    = train_h2o,
validation_frame = valid_h2o,
#nfolds=10,
ntrees=50,
binomial_double_trees=TRUE
)
# Predict on hold-out set, test_h2o
pred_h2o <- h2o.predict(object = automl_models_h2o, newdata = test_h2o)
test_performance <- test_h2o %>%
tibble::as_tibble() %>%
select(performance) %>%
add_column(pred = as.vector(pred_h2o$predict)) %>%
mutate_if(is.character, as.factor)
test_performance
confusion_matrix <- test_performance %>%
table()
confusion_matrix
automl_models_h2o <-h2o.randomForest(
x = x,
y = y,
training_frame    = train_h2o,
validation_frame = valid_h2o,
nfolds=10,
ntrees=50,
binomial_double_trees=TRUE
)
# Predict on hold-out set, test_h2o
pred_h2o <- h2o.predict(object = automl_models_h2o, newdata = test_h2o)
test_performance <- test_h2o %>%
tibble::as_tibble() %>%
select(performance) %>%
add_column(pred = as.vector(pred_h2o$predict)) %>%
mutate_if(is.character, as.factor)
test_performance
confusion_matrix <- test_performance %>%
table()
confusion_matrix
# Performance analysis
tn <- confusion_matrix[1]
tp <- confusion_matrix[4]
fp <- confusion_matrix[3]
fn <- confusion_matrix[2]
accuracy <- (tp + tn) / (tp + tn + fp + fn)
misclassification_rate <- 1 - accuracy
recall <- tp / (tp + fn)
precision <- tp / (tp + fp)
null_error_rate <- tn / (tp + tn + fp + fn)
tibble(
accuracy,
misclassification_rate,
recall,
precision,
null_error_rate
) %>%
transpose()
class(automl_leader)
# Test our predict_model() function
predict_model(x = automl_models_h2o #automl_leader
, newdata = as.data.frame(test_h2o[,-1]), type = 'raw') %>%
tibble::as_tibble()
# Run lime() on training set
explainer <- lime::lime(
as.data.frame(train_h2o[,-1]),
model          = automl_models_h2o #automl_leader
,
bin_continuous = FALSE)
# Test our predict_model() function
predict_model(x = automl_models_h2o #automl_leader
, newdata = as.data.frame(test_h2o[1:6,-1]), type = 'raw') %>%
tibble::as_tibble()
test_h2o[1:6
,]
# Run lime() on training set
explainer <- lime::lime(
as.data.frame(train_h2o[1:6,-1]),
model          = automl_models_h2o #automl_leader
,
bin_continuous = FALSE)
# Run explain() on explainer
explanation <- lime::explain(
as.data.frame(test_h2o[1:6,-1]),
explainer    = explainer,
n_labels     = 1,
n_features   = 5,
kernel_width = 0.5)
# Run lime() on training set
explainer <- lime::lime(
as.data.frame(train_h2o[,-1]),
model          = automl_models_h2o #automl_leader
,
bin_continuous = FALSE)
# Run explain() on explainer
explanation <- lime::explain(
as.data.frame(test_h2o[1:6,-1]),
explainer    = explainer,
n_labels     = 1,
n_features   = 5,
kernel_width = 0.5)
plot_features(explanation) +
labs(title = "HR Predictive Analytics: LIME Feature Importance Visualization",
subtitle = "Hold Out (Test) Set, First 10 Cases Shown")
library("titanic")
install.packages("titanic")
titanic <- titanic_train[,c("Survived", "Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")]
library("titanic")
titanic <- titanic_train[,c("Survived", "Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")]
titanic$Survived <- factor(titanic$Survived)
titanic$Sex <- factor(titanic$Sex)
titanic$Embarked <- factor(titanic$Embarked)
levels(titanic$Embarked)[1] = "N"
titanic <- na.omit(titanic)
head(titanic)
library("randomForest")
rf_model <- randomForest(Survived ~ .,  data = titanic)
rf_model
library("DALEX")
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$Survived == "1", label = "Random Forest v7")
vi_rf <- variable_importance(rf_explain, type = "difference")
head(vi_rf)
plot(vi_rf)
vr_age  <- variable_response(rf_explain, variable =  "Age")
head(vr_age)
plot(vr_age, use_facets = TRUE)
rf_model <- randomForest(Survived ~ .,  data = titanic)
rf_model
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$Survived == "1", label = "Random Forest v7")
vi_rf <- variable_importance(rf_explain, type = "difference")
head(vi_rf)
plot(vi_rf)
vr_age  <- variable_response(rf_explain, variable =  "Age")
head(vr_age)
plot(vr_age, use_facets = TRUE)
plot(vi_rf)
head(titanic)
rf_model <- randomForest(Survived ~ .,  data = titanic)
rf_model
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$Survived == "1", label = "Random Forest v7")
vi_rf <- variable_importance(rf_explain, type = "difference")
head(vi_rf)
plot(vi_rf)
titanic
titanic[,-1]
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$Survived == "1", label = "Random Forest v7")
vi_rf <- variable_importance(rf_explain, type = "difference")
head(vi_rf)
vi_rf
vi_rf <- variable_importance(rf_explain, type = "difference")
head(vi_rf)
plot(vi_rf)
vi_rf <- variable_importance(rf_explain, type = "difference")
head(vi_rf)
plot(vi_rf)
vr_age  <- variable_response(rf_explain, variable =  "Age")
head(vr_age)
plot(vr_age, use_facets = TRUE)
vr_pclass  <- variable_response(rf_explain, variable =  "Pclass")
plot(vr_pclass, use_facets = TRUE)
vr_fare  <- variable_response(rf_explain, variable =  "Fare")
plot(vr_fare, use_facets = TRUE)
vr_embarked  <- variable_response(rf_explain, variable =  "Embarked")
plot(vr_embarked)
new_passanger <- data.frame(
Pclass = 1,
Sex = factor("male", levels = c("female", "male")),
Age = 8,
SibSp = 0,
Parch = 0,
Fare = 72,
Embarked = factor("C", levels = c("N","C","Q","S"))
)
sp_rf <- single_prediction(rf_explain, new_passanger)
plot(sp_rf)
library(tidyverse)
library(readxl)
library(lubridate)
#read data
db <- read_excel("crif/zadanie_20171117.xlsx",1,col_names = TRUE)
#remove bad class
db <- db[db$performance!='UNKNOWN',]
#Deal with na value
db$ip_country[db$ip_country=='-']='na'
#unify data
db$ip_country[db$ip_country=='pl']='PL'
db$ip_country[db$ip_country=='Pl']='PL'
#data format
db$application_date=ymd(db$application_date)
db=db1
db$mth=month(db$application_date)
db=db[,c(-6,-7)]
db$ratio=db$loan_amount/db$earnings
df <- db %>%
mutate_if(is.character, as.factor) %>%
select(performance, everything())
db$mth=month(db$application_date)
#read data
db <- read_excel("crif/zadanie_20171117.xlsx",1,col_names = TRUE)
db$mth=month(db$application_date)
#remove bad class
db <- db[db$performance!='UNKNOWN',]
#read data
db <- read_excel("crif/zadanie_20171117.xlsx",1,col_names = TRUE)
#remove bad class
db <- db[db$performance!='UNKNOWN',]
db$mth=month(db$application_date)
#read data
db <- read_excel("crif/zadanie_20171117.xlsx",1,col_names = TRUE)
#remove bad class
db <- db[db$performance!='UNKNOWN',]
db$mth=month(db$application_date)
#read data
db <- read_excel("crif/zadanie_20171117.xlsx",1,col_names = TRUE)
#remove bad class
db <- db[db$performance!='UNKNOWN',]
db=db[,c(-6,-7)]
db$ratio=db$loan_amount/db$earnings
df <- db %>%
mutate_if(is.character, as.factor) %>%
select(performance, everything())
titanic=df
titanic <- na.omit(titanic)
head(titanic)
rf_model <- randomForest(performance ~ .,  data = titanic)
titanic$id=NULL
rf_model <- randomForest(performance ~ .,  data = titanic)
rf_model
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$Survived == "1", label = "Random Forest v7")
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$performance == "GOOD", label = "Random Forest v7")
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$performance == "GOOD", label = "Random Forest v7")
levels(titanic$performance)=c("0","1")
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$performance == "GOOD", label = "Random Forest v7")
titanic <- titanic_train[,c("Survived", "Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")]
titanic$Survived <- factor(titanic$Survived)
titanic$Sex <- factor(titanic$Sex)
titanic$Embarked <- factor(titanic$Embarked)
levels(titanic$Embarked)[1] = "N"
titanic <- na.omit(titanic)
head(titanic)
rf_model <- randomForest(performance ~ .,  data = titanic)
rf_model <- randomForest(Survived ~ .,  data = titanic)
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$performance == "GOOD", label = "Random Forest v7")
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$Survived == "1", label = "Random Forest v7")
rf_model <- randomForest(Survived ~ .,  data = titanic)
rf_model
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$performance == "GOOD", label = "Random Forest v7")
library("DALEX")
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$performance == "GOOD", label = "Random Forest v7")
library("titanic")
titanic <- titanic_train[,c("Survived", "Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")]
titanic$Survived <- factor(titanic$Survived)
titanic$Sex <- factor(titanic$Sex)
titanic$Embarked <- factor(titanic$Embarked)
levels(titanic$Embarked)[1] = "N"
titanic <- na.omit(titanic)
head(titanic)
library("randomForest")
rf_model <- randomForest(performance ~ .,  data = titanic)
rf_model <- randomForest(Survived ~ .,  data = titanic)
rf_model
levels(titanic$performance)=c("0","1")
rf_model <- randomForest(Survived ~ .,  data = titanic)
rf_model
library("DALEX")
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$performance == "GOOD", label = "Random Forest v7")
library("titanic")
titanic <- titanic_train[,c("Survived", "Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")]
titanic$Survived <- factor(titanic$Survived)
titanic$Sex <- factor(titanic$Sex)
titanic$Embarked <- factor(titanic$Embarked)
levels(titanic$Embarked)[1] = "N"
titanic <- na.omit(titanic)
head(titanic)
library("randomForest")
rf_model <- randomForest(Survived ~ .,  data = titanic)
rf_model
library("DALEX")
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$performance == "GOOD", label = "Random Forest v7")
vi_rf <- variable_importance(rf_explain, type = "difference")
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$performance == "1", label = "Random Forest v7")
vi_rf <- variable_importance(rf_explain, type = "difference")
head(vi_rf)
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$performance == "1", label = "Random Forest v7")
vi_rf <- variable_importance(rf_explain, type = "difference")
head(vi_rf)
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$Survived == "1", label = "Random Forest v7")
vi_rf <- variable_importance(rf_explain, type = "difference")
head(vi_rf)
plot(vi_rf)
vr_age  <- variable_response(rf_explain, variable =  "Age")
head(vr_age)
plot(vr_age, use_facets = TRUE)
vr_age
vr_age  <- variable_response(rf_explain, variable =  "Age")
plot(titanic$Age,titanic$Survived)
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$Survived == "0", label = "Random Forest v7")
vi_rf <- variable_importance(rf_explain, type = "difference")
head(vi_rf)
plot(vi_rf)
vr_age  <- variable_response(rf_explain, variable =  "Age")
head(vr_age)
plot(vr_age, use_facets = TRUE)
rf_model <- randomForest(Survived ~ .,  data = titanic)
rf_model
rf_model <- randomForest(Survived ~ .,  data = titanic)
rf_model
rf_explain <- explain(rf_model, data = titanic[,-1],
y = titanic$Survived == "1", label = "Random Forest v7")
vi_rf <- variable_importance(rf_explain, type = "difference")
head(vi_rf)
plot(vi_rf)
vr_age  <- variable_response(rf_explain, variable =  "Age")
head(vr_age)
plot(vr_age, use_facets = TRUE)
devtools::install_github("pbiecek/DALEX")
devtools::install_github("MI2DataLab/factorMerger")
devtools::install_github("pbiecek/breakDown")
devtools::install_github("pbiecek/DALEX")
install.packages("pdp")
devtools::install_github("pbiecek/DALEX")
library("DALEX")
devtools::install_github("pbiecek/DALEX")
